import requests
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from io import BytesIO
from PIL import Image
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import math

YANDEX_API_KEY = '8013b162-6b42-4997-9691-77b7074026e0'
BOT_TOKEN = '7253763825:AAHLEW4kCm7b-eOTcRwgtKSNpcqiVABfaDA'

user_address = None
city = None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_searches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        brand TEXT NOT NULL,
        model TEXT NOT NULL,
        city TEXT NOT NULL,
        found_address TEXT,
        search_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    conn.commit()
    conn.close()


init_db()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

start_kb = ReplyKeyboardMarkup(keyboard=[[
    KeyboardButton(text="–ù–∞–π—Ç–∏"),
    KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")], [KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")], [KeyboardButton(text="–ê–¥—Ä–µ—Å")]],
    resize_keyboard=True)


class Form(StatesGroup):
    brand = State()
    model = State()
    city = State()
    find = State()
    out = State()
    waiting_for_address = State()


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_search(user_id, username, first_name, last_name, brand, model, city, found_address=None):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    INSERT INTO user_searches (user_id, username, first_name, last_name, brand, model, city, found_address)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, brand, model, city, found_address))

    conn.commit()
    conn.close()


# –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_searches(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    SELECT brand, model, city, found_address, search_date 
    FROM user_searches 
    WHERE username = ?
    ORDER BY search_date DESC
    ''', (username,))

    results = cursor.fetchall()
    conn.close()
    return results


def clear_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    DELETE FROM user_searches 
    WHERE user_id = ?
    ''', (user_id,))

    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()
    return deleted_rows


def get_coords(city, address):
    url = "https://geocode-maps.yandex.ru/1.x/"
    params = {
        "apikey": YANDEX_API_KEY,
        "geocode": f"{address} –≤ {city}",
        "format": "json"
    }

    response = requests.get(url, params=params)
    data = response.json()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    feature = data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
    longitude, latitude = feature["Point"]["pos"].split()

    return {"—à–∏—Ä–æ—Ç–∞": float(latitude), "–¥–æ–ª–≥–æ—Ç–∞": float(longitude)}



def find_auto_services(brand, model, city):
    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å



    search_text = f"–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å {brand} {model} –≤ {city}"

    # –ó–∞–ø—Ä–æ—Å –∫ API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
    geocoder_url = "https://geocode-maps.yandex.ru/1.x/"
    params = {
        "apikey": YANDEX_API_KEY,
        "geocode": search_text,
        "format": "json",
        "results": 25,
        "lang": "ru_RU"
    }

    response = requests.get(geocoder_url, params=params)
    data = response.json()

    features = data["response"]["GeoObjectCollection"]["featureMember"]
    if not features:
        return {}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results = {}
    for i, feature in enumerate(features, 1):
        geo_object = feature["GeoObject"]
        address = geo_object["metaDataProperty"]["GeocoderMetaData"]["text"]
        longitude, latitude = geo_object["Point"]["pos"].split()

        results[f"–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å {i}"] = {
            "–∞–¥—Ä–µ—Å": address,
            "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã": {
                "—à–∏—Ä–æ—Ç–∞": latitude,
                "–¥–æ–ª–≥–æ—Ç–∞": longitude
            }
        }

    return results


def calculate_distance(lat1, lon1, lat2, lon2):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
    """
    R = 6371

    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])

    dlat = lat2 - lat1
    dlon = lon2 - lon1

    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    return R * c


def sort_services_by_distance(services, target_point):
    """
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –¥–æ —Ç–æ—á–∫–∏
    """
    target_lat = target_point['—à–∏—Ä–æ—Ç–∞']
    target_lon = target_point['–¥–æ–ª–≥–æ—Ç–∞']

    for name, service in services.items():
        try:
            service_lat = float(service['–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']['—à–∏—Ä–æ—Ç–∞'])
            service_lon = float(service['–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']['–¥–æ–ª–≥–æ—Ç–∞'])
            distance = calculate_distance(target_lat, target_lon, service_lat, service_lon)
            service['—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–∫–º'] = round(distance, 2)
        except (KeyError, ValueError):
            service['—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–∫–º'] = float('inf')

    sorted_services = dict(sorted(
        services.items(),
        key=lambda item: item[1]['—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–∫–º']
    ))

    return sorted_services


async def send_map_image(message: Message, coordinates: tuple, zoom=15):
    map_params = {
        "ll": f"{coordinates[0]},{coordinates[1]}",
        "l": "map",
        "z": str(zoom),
        "size": "650,450",
        "pt": f"{coordinates[0]},{coordinates[1]},pm2rdm"  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
    }

    map_url = "https://static-maps.yandex.ru/1.x/"
    response = requests.get(map_url, params=map_params)

    if response.status_code == 200:
        img_bytes = BytesIO()
        img = Image.open(BytesIO(response.content))
        img.save(img_bytes, format='PNG')
        img_bytes.seek(0)

        await message.answer_photo(
            types.BufferedInputFile(img_bytes.read(), filename="map.png"),
            caption="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞"
        )
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É")



@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.", reply_markup=start_kb)


@dp.message(or_f(Command("brand"), (F.text.lower() == "–Ω–∞–π—Ç–∏")))
async def find(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota):")
    await state.set_state(Form.model)


@dp.message(Form.model)
async def process_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Camry):")
    await state.set_state(Form.city)


@dp.message(Form.city)
async def process_model(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")
    await state.set_state(Form.out)


@dp.message(Form.out)
async def process_city(message: Message, state: FSMContext):
    global city, user_address
    await state.update_data(city=message.text)
    city = message.text

    user_data = await state.get_data()

    brand = user_data['brand']
    model = user_data['model']
    city = user_data['city']

    search_text = f"–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å {brand} {model} –≤ {city}"

    auto = find_auto_services(brand, model, city)
    user_coords = get_coords(city, user_address)
    sorted_list = sort_services_by_distance(auto, user_coords)

    res = list(sorted_list.items())[0]



    address = None
    coordinates = None
    for name, info in dict([res]).items():
        address = info['–∞–¥—Ä–µ—Å']
        coordinates = (info['–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']['–¥–æ–ª–≥–æ—Ç–∞'], info['–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã']['—à–∏—Ä–æ—Ç–∞'])

    await message.answer(f"–ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å: "
                         f"{address}")

    await send_map_image(message, coordinates)

    save_user_search(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        brand=brand,
        model=model,
        city=city,
        found_address=address
    )

    await state.clear()


@dp.message(or_f(Command("static"), (F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")))
async def show_statistics(message: Message):
    username = message.from_user.username
    if not username:
        await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    searches = get_user_searches(username)

    if not searches:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
    for i, search in enumerate(searches, 1):
        brand, model, city, address, date = search
        response += (
            f"üîπ –ó–∞–ø—Ä–æ—Å #{i}\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üöó –ê–≤—Ç–æ: {brand} {model}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
        )
        if address:
            response += f"üìç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {address}\n"
        else:
            response += "üìç –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        response += "\n"

    await message.answer(response)


@dp.message(or_f(Command("clear"), (F.text.lower() == "–æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")))
async def clear_data(message: Message):
    user_id = message.from_user.id
    deleted_rows = clear_user_data(user_id)

    if deleted_rows > 0:
        await message.answer(f"‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ ({deleted_rows} –∑–∞–ø–∏—Å–µ–π) –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.")
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


@dp.message(or_f(Command("address"), (F.text.lower() == "–∞–¥—Ä–µ—Å")))
async def handle_address(message: types.Message, state: FSMContext):
    global user_address

    if user_address:
        await message.answer(f"–¢–µ–∫—É—â–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {user_address}")
        return

    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å–∞ –Ω–µ—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
    await state.set_state(Form.waiting_for_address)


@dp.message(Form.waiting_for_address)
async def save_address(message: types.Message, state: FSMContext):
    global user_address
    user_address = message.text
    await message.answer(f"–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {user_address}")
    await state.clear()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
