import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from io import BytesIO
from PIL import Image

YANDEX_API_KEY = '8013b162-6b42-4997-9691-77b7074026e0'
BOT_TOKEN = '7253763825:AAHLEW4kCm7b-eOTcRwgtKSNpcqiVABfaDA'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


class Form(StatesGroup):
    brand = State()
    model = State()
    city = State()


@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota):")
    await state.set_state(Form.brand)


@dp.message(Form.brand)
async def process_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Camry):")
    await state.set_state(Form.model)


@dp.message(Form.model)
async def process_model(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")
    await state.set_state(Form.city)


@dp.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    user_data = await state.get_data()

    brand = user_data['brand']
    model = user_data['model']
    city = user_data['city']

    search_text = f"–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å {brand} {model} –≤ {city}"

    try:
        geocoder_url = "https://geocode-maps.yandex.ru/1.x/"
        params = {
            "apikey": YANDEX_API_KEY,
            "geocode": search_text,
            "format": "json",
            "results": 1,
            "lang": "ru_RU"
        }

        response = requests.get(geocoder_url, params=params)
        data = response.json()

        features = data["response"]["GeoObjectCollection"]["featureMember"]
        if not features:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            await state.clear()
            return

        geo_object = features[0]["GeoObject"]
        coords = geo_object["Point"]["pos"]
        address = geo_object["metaDataProperty"]["GeocoderMetaData"]["text"]
        longitude, latitude = coords.split()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        map_url = "https://static-maps.yandex.ru/1.x/"
        map_params = {
            "ll": f"{longitude},{latitude}",
            "spn": "0.005,0.005",
            "l": "map",
            "pt": f"{longitude},{latitude},pm2rdm"
        }

        map_response = requests.get(map_url, params=map_params)

        await message.answer(f"üîç –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å:\nüìç –ê–¥—Ä–µ—Å: {address}")

        img_bytes = BytesIO()
        img = Image.open(BytesIO(map_response.content))
        img.save(img_bytes, format='PNG')
        img_bytes.seek(0)

        await message.answer_photo(types.BufferedInputFile(img_bytes.read(), filename="map.png"))

    except Exception as e:
        raise (f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    await state.clear()


@dp.message(Command("cancel"))
async def cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())