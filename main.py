import requests
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from io import BytesIO
from PIL import Image
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup


YANDEX_API_KEY = '8013b162-6b42-4997-9691-77b7074026e0'
BOT_TOKEN = '7253763825:AAHLEW4kCm7b-eOTcRwgtKSNpcqiVABfaDA'


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_searches (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        brand TEXT NOT NULL,
        model TEXT NOT NULL,
        city TEXT NOT NULL,
        found_address TEXT,
        search_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    conn.commit()
    conn.close()


init_db()

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

start_kb = ReplyKeyboardMarkup(keyboard=[[
    KeyboardButton(text="–ù–∞–π—Ç–∏"),
    KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")], [KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]],
    resize_keyboard=True)


class Form(StatesGroup):
    brand = State()
    model = State()
    city = State()
    find = State()
    out = State()


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_search(user_id, username, first_name, last_name, brand, model, city, found_address=None):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    INSERT INTO user_searches (user_id, username, first_name, last_name, brand, model, city, found_address)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, brand, model, city, found_address))

    conn.commit()
    conn.close()

# –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_searches(username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    SELECT brand, model, city, found_address, search_date 
    FROM user_searches 
    WHERE username = ?
    ORDER BY search_date DESC
    ''', (username,))

    results = cursor.fetchall()
    conn.close()
    return results


def clear_user_data(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''
    DELETE FROM user_searches 
    WHERE user_id = ?
    ''', (user_id,))

    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()
    return deleted_rows


@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.", reply_markup=start_kb)


@dp.message(or_f(Command("brand"), (F.text.lower() == "–Ω–∞–π—Ç–∏")))
async def find(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota):")
    await state.set_state(Form.model)


@dp.message(Form.model)
async def process_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Camry):")
    await state.set_state(Form.city)


@dp.message(Form.city)
async def process_model(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")
    await state.set_state(Form.out)


@dp.message(Form.out)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    user_data = await state.get_data()

    brand = user_data['brand']
    model = user_data['model']
    city = user_data['city']

    search_text = f"–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å {brand} {model} –≤ {city}"

    try:
        # –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.API
        geocoder_url = "https://geocode-maps.yandex.ru/1.x/"
        params = {
            "apikey": YANDEX_API_KEY,
            "geocode": search_text,
            "format": "json",
            "results": 1,
            "lang": "ru_RU"
        }

        response = requests.get(geocoder_url, params=params)
        data = response.json()

        features = data["response"]["GeoObjectCollection"]["featureMember"]
        if not features:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∞–¥—Ä–µ—Å–∞
            save_user_search(
                user_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                brand=brand,
                model=model,
                city=city
            )
            await state.clear()
            return

        geo_object = features[0]["GeoObject"]
        coords = geo_object["Point"]["pos"]
        address = geo_object["metaDataProperty"]["GeocoderMetaData"]["text"]
        longitude, latitude = coords.split()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        map_url = "https://static-maps.yandex.ru/1.x/"
        map_params = {
            "ll": f"{longitude},{latitude}",
            "spn": "0.005,0.005",
            "l": "map",
            "pt": f"{longitude},{latitude},pm2rdm"
        }

        map_response = requests.get(map_url, params=map_params)

        await message.answer(f"üîç –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å:\nüìç –ê–¥—Ä–µ—Å: {address}")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        img_bytes = BytesIO()
        img = Image.open(BytesIO(map_response.content))
        img.save(img_bytes, format='PNG')
        img_bytes.seek(0)

        await message.answer_photo(types.BufferedInputFile(img_bytes.read(), filename="map.png"))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
        save_user_search(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            brand=brand,
            model=model,
            city=city,
            found_address=address
        )

    except Exception as e:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –∞–¥—Ä–µ—Å–∞
        save_user_search(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            brand=brand,
            model=model,
            city=city
        )

    await state.clear()

@dp.message(or_f(Command("static"), (F.text.lower() == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")))
async def show_statistics(message: Message):
    username = message.from_user.username
    if not username:
        await message.answer("–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    searches = get_user_searches(username)

    if not searches:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return

    response = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
    for i, search in enumerate(searches, 1):
        brand, model, city, address, date = search
        response += (
            f"üîπ –ó–∞–ø—Ä–æ—Å #{i}\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üöó –ê–≤—Ç–æ: {brand} {model}\n"
            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
        )
        if address:
            response += f"üìç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {address}\n"
        else:
            response += "üìç –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        response += "\n"

    await message.answer(response)


@dp.message(or_f(Command("clear"), (F.text.lower() == "–æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")))
async def clear_data(message: Message):
    user_id = message.from_user.id
    deleted_rows = clear_user_data(user_id)

    if deleted_rows > 0:
        await message.answer(f"‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ ({deleted_rows} –∑–∞–ø–∏—Å–µ–π) –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.")
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
